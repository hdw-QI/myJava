<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation=" http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!--开启注解扫描  只扫描Controller注解-->
    <context:component-scan base-package="controller">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 配置视图解析器对象-->
    <bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--过滤静态资源-->
    <!--配置对静态资源的访问(方式一。交由tomcat进行处理，不进入springmvc) 2选1-->
    <mvc:default-servlet-handler/>

    <!--配置对静态资源的访问(方式二。自行处理) 2选1-->
    <!--<mvc:resources location="/static/css/" mapping="/css/**" />
    <mvc:resources location="/static/images/" mapping="/images/**" />
    <mvc:resources location="/static/js/" mapping="/js/**" />-->

    <!--配置拦截器-->
    <mvc:interceptors>
        <mvc:interceptor>
            <!--/** 包括路径及其子路径-->
            <!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截-->
            <!--/admin/** 拦截的是/admin/下的所有-->
            <mvc:mapping path="/hello"/>
            <!--bean配置的就是拦截器-->
            <bean class="interceptor.HelloInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--声明类型类型转换器-->
    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <list>
                <bean class="converter.StringToDateConverter"/>
            </list>
        </property>
    </bean>

    <!--文件上传配置-->
    <bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 -->
        <property name="defaultEncoding" value="utf-8"/>
        <!-- 上传文件大小上限，单位为字节（10485760=10M） -->
        <property name="maxUploadSize" value="10485760"/>
        <property name="maxInMemorySize" value="40960"/>
    </bean>

    <!--开启springMVC注解(@GetMapping等)的支持-->
    <!--springmvc.xml 配置文件中使用 <mvc:annotation-driven/> 标签替代 bean 标签配置的注解处理器和适配器。-->
    <!--还有一个功能，当使用@ResponseBody时（返回响应体），会自动将对象或集合转换成json格式（默认使用Json序列化工具jackson转换为json）-->
    <!--conversion-service属性引用转换器-->
    <mvc:annotation-driven conversion-service="conversionService">
        <!--        消息转换器：不使用默认的jackson组件-->
        <mvc:message-converters register-defaults="true">
            <!--            配置FastJson工具中的消息转换器类-->
            <bean id="fastJsonConverters" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <!--                消息转换器类中的字段赋值，支持的枚举类型-->
                <property name="supportedMediaTypes" >
                    <list>
                        <value>application/json;charset=utf-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>


</beans>